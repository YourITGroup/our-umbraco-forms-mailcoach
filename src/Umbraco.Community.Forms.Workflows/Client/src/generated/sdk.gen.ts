// This file is auto-generated by @hey-api/openapi-ts

import type { Options as ClientOptions, TDataShape, Client } from './client';
import type { GetCampaignMonitorClientsData, GetCampaignMonitorClientsResponses, GetCampaignMonitorClientsErrors, GetCampaignMonitorListsData, GetCampaignMonitorListsResponses, GetCampaignMonitorListsErrors, GetMailChimpListsData, GetMailChimpListsResponses, GetMailChimpListsErrors, GetMailCoachListsData, GetMailCoachListsResponses, GetMailCoachListsErrors } from './types.gen';
import { client as _heyApiClient } from './client.gen';

export type Options<TData extends TDataShape = TDataShape, ThrowOnError extends boolean = boolean> = ClientOptions<TData, ThrowOnError> & {
    /**
     * You can provide a client instance returned by `createClient()` instead of
     * individual options. This might be also useful if you want to implement a
     * custom client.
     */
    client?: Client;
    /**
     * You can pass arbitrary values through the `meta` object. This can be
     * used to access values that aren't defined as part of the SDK function.
     */
    meta?: Record<string, unknown>;
};

export class Config {
    public static getCampaignMonitorClients<ThrowOnError extends boolean = true>(options?: Options<GetCampaignMonitorClientsData, ThrowOnError>) {
        return (options?.client ?? _heyApiClient).get<GetCampaignMonitorClientsResponses, GetCampaignMonitorClientsErrors, ThrowOnError>({
            security: [
                {
                    scheme: 'bearer',
                    type: 'http'
                }
            ],
            url: '/CampaignMonitorClients',
            ...options
        });
    }
    
    public static getCampaignMonitorLists<ThrowOnError extends boolean = true>(options?: Options<GetCampaignMonitorListsData, ThrowOnError>) {
        return (options?.client ?? _heyApiClient).get<GetCampaignMonitorListsResponses, GetCampaignMonitorListsErrors, ThrowOnError>({
            security: [
                {
                    scheme: 'bearer',
                    type: 'http'
                }
            ],
            url: '/CampaignMonitorLists',
            ...options
        });
    }
    
    public static getMailChimpLists<ThrowOnError extends boolean = true>(options?: Options<GetMailChimpListsData, ThrowOnError>) {
        return (options?.client ?? _heyApiClient).get<GetMailChimpListsResponses, GetMailChimpListsErrors, ThrowOnError>({
            security: [
                {
                    scheme: 'bearer',
                    type: 'http'
                }
            ],
            url: '/MailChimpLists',
            ...options
        });
    }
    
    public static getMailCoachLists<ThrowOnError extends boolean = true>(options?: Options<GetMailCoachListsData, ThrowOnError>) {
        return (options?.client ?? _heyApiClient).get<GetMailCoachListsResponses, GetMailCoachListsErrors, ThrowOnError>({
            security: [
                {
                    scheme: 'bearer',
                    type: 'http'
                }
            ],
            url: '/MailCoachLists',
            ...options
        });
    }
}